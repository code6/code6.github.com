<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | MayCoder]]></title>
  <link href="http://code6.github.com/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://code6.github.com/"/>
  <updated>2013-04-04T12:08:37+08:00</updated>
  <id>http://code6.github.com/</id>
  <author>
    <name><![CDATA[Code6]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to build a dynamic SQL in an elegant way]]></title>
    <link href="http://code6.github.com/blog/2012/03/24/how-to-build-a-dynamic-sql-in-an-elegant-way/"/>
    <updated>2012-03-24T11:27:00+08:00</updated>
    <id>http://code6.github.com/blog/2012/03/24/how-to-build-a-dynamic-sql-in-an-elegant-way</id>
    <content type="html"><![CDATA[<p>p(date). 2012-04-04</p>

<p>换上octopress, 写blog还是不勤快, 目前装在虚拟机当中，怎么勤快:(。</p>

<p>不岔开话题，这次讨论的是如何 <em>动态地生成一条查询SQL</em> 。起因是一个统计报表要新增加一些筛选条件， 而这些筛选条件并非简单加一个where条件，有时还要涉及到联表(join)以及聚合条件的改变。原先我的做法是 设几个变量，诸如where, groupby, joins等，然后再将这几个变量合起来，这之中得考虑逗号，是否需要插入'and'等， 简单来说还行，但如果多个地方都需要用到，那么稍微麻烦了，而且代码重复较多, 所以我想找找有没有动态生成查询SQL的更方便的方法。</p>

<p>看到 "一篇blog":http://patrickallaert.blogspot.com/2007/09/building-dynamic-sql-queries-elegant.html , 大概讲的就是平常的一些小技巧吧, 比如使用implode来拼where条件。</p>

<p>后来在stackoverflow看到 "一个帖子":http://stackoverflow.com/questions/2258438/how-do-i-build-a-dynamic-sql-query , 这个问题跟我面对的问题基本一致，帖子的第一个解答即是我最终采取的方案。即是写一些函数来记录主要的内容(select内容，join表与条件, where条件, groupby条件等), 然后按确定的方式来拼出最终的查询语句。</p>

<p>后面看到一个 "squlbuilder":http://openhms.sourceforge.net/sqlbuilder/example.html ，看上去有点重，有很多功能目前都还不需要用到。</p>

<p>最后看到github上的一个 "SQLBuilder":https://github.com/c9s/SQLBuilder ，感觉实现得还不错，当然也有很多我不太需求的功能，故在其基础上删减了一下，快速实现了，放到 "github":https://github.com/code6/query-builder 上了。</p>

<p>一个简单的demo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>demo 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sqlbuilder = new QueryBuilder();
</span><span class='line'> $sqlbuilder->table('fact.&lt;code>order&lt;/code>', 'f')&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>      -&gt;select(array(
</span><span class='line'>            'city',
</span><span class='line'>           'quantity' =&gt; 'sum(quantity)',
</span><span class='line'>           'averageprice' =&gt; 'ifnull(sum(revenue) / sum(quantity), 0)'))
</span><span class='line'>      -&gt;join('dim.date', 'd', '', 'f.date = d.date')
</span><span class='line'>      -&gt;where('d.date between ? and ?', 'ss', array($begin_date, $end_date))
</span><span class='line'>      -&gt;groupby('d.month_num_overall')
</span><span class='line'>      -&gt;orderby('d.month_num_overall desc')
</span><span class='line'>      -&gt;limit(3)
</span><span class='line'>      -&gt;offset(3);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>echo $sqlbuilder->build();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果格式化如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>demo 1 output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT city,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   sum(quantity) AS quantity,
</span><span class='line'>   ifnull(sum(revenue) / sum(quantity), 0) AS averageprice
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>FROM fact.&lt;code>order&lt;/code> f
</span><span class='line'>JOIN dim.date d ON f.date = d.date
</span><span class='line'>WHERE d.date BETWEEN ? AND ?
</span><span class='line'>GROUP BY d.month_num_overall
</span><span class='line'>ORDER BY d.month_num_overall DESC,d.month_num_overall ASC
</span><span class='line'>LIMIT 3, 3</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中 @getBindParams@ 函数返回一个数组, 包含绑定的变量的类型以及具体的变量, 比如 @array('ii', 1, 2)@ , 而 @getReturnParams@ 函数则返回查询结果列名数组。</p>

<p>目前还简单增加了 <em>子查询</em> 的支持。</p>

<p>一个查询 "gini系数":http://en.wikipedia.org/wiki/Gini_coefficient 的demo如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gini demo </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sub1 = new QueryBuilder();
</span><span class='line'>$sub1->table('fact.&lt;code>order&lt;/code>', 'f')
</span><span class='line'>  ->where('d.date between ? and ?', 'ss', array($begin_date, $end_date))
</span><span class='line'>  ->where ('coupontype != 4')
</span><span class='line'>  ->orderby('focus', 'f.revenue');&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$sub0 = new QueryBuilder();
</span><span class='line'>$sub0->table(" (select @cs := 0) ", 'cs_idx')
</span><span class='line'>  ->join(" (select @focus:='') ", "s_idx")
</span><span class='line'>  ->join($sub1, 'raw')
</span><span class='line'>  ->select(array('accumulate_revenue' => '@cs := CASE WHEN @focus != raw.focus THEN raw.revenue ELSE @cs + raw.revenue END',&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>            'focus' =&gt; '@focus := raw.focus'));
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>$gini  = new QueryBuilder();
</span><span class='line'>$gini->table($sub0, 'base')
</span><span class='line'>  ->select(array(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    'focus',
</span><span class='line'>   'g' =&gt; 'truncate(1 - 1.0 / count(*) * (2 * sum(base.accumulate_revenue) / max(base.accumulate_revenue) -1), 2)'))
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  ->groupby('base.focus');&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>echo $gini->build();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gini demo output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT focus,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   truncate(1 - 1.0 / count(*) * (2 * sum(base.accumulate_revenue) / max(base.accumulate_revenue) -1), 2) AS g
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>FROM
</span><span class='line'>  (SELECT @cs := CASE&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                 WHEN @focus != raw.focus THEN raw.revenue
</span><span class='line'>                 ELSE @cs + raw.revenue
</span><span class='line'>             END AS accumulate_revenue, @focus := raw. focus AS focus
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   FROM&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> (SELECT @cs := 0) cs_idx
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   JOIN&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> (SELECT @focus:='') s_idx
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   JOIN&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> ( SELECT f.FOCUS AS focus,
</span><span class='line'>      f.revenue
</span><span class='line'>  FROM fact.`order` f
</span><span class='line'>  WHERE d.date be tween ?
</span><span class='line'>    AND ?
</span><span class='line'>    AND coupontype != 4
</span><span class='line'>  ORDER BY focus,
</span><span class='line'>           f.revenue) raw) base
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>GROUP BY base.focus</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>代码测试方面, 后面发现参考代码是使用 "phpunit":http://www.phpunit.de/manual/current/en/installation.html 来进行单元测试的，简单地使用一下，还是挺好用的:)</p>

<p>目前还算能满足需求，当然对于预处理语句的变量处理还可以改进，收集需求再改进吧。</p>
]]></content>
  </entry>
  
</feed>
